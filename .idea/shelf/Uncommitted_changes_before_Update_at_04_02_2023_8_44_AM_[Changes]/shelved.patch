Index: app/src/main/java/com/poly/restaurant/data/db/AppDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.poly.restaurant.data.db;\r\n\r\nimport android.content.Context;\r\n\r\nimport androidx.room.Database;\r\nimport androidx.room.Room;\r\nimport androidx.room.RoomDatabase;\r\n\r\nimport com.poly.restaurant.data.db.dao.ProductDao;\r\nimport com.poly.restaurant.data.db.dao.TableDao;\r\nimport com.poly.restaurant.data.models.Product;\r\nimport com.poly.restaurant.data.models.Table;\r\n\r\n@Database(entities = {Product.class, Table.class}, version = 1, exportSchema = false)\r\npublic abstract class AppDatabase extends RoomDatabase {\r\n    public static final String DB_NAME = \"restaurant.db\";\r\n    public static AppDatabase instance;\r\n\r\n    public static synchronized AppDatabase getInstance(Context context){\r\n        if (instance == null){\r\n            instance = Room.databaseBuilder(context, AppDatabase.class, DB_NAME)\r\n                    .fallbackToDestructiveMigration()\r\n                    .allowMainThreadQueries().build();\r\n        }\r\n        return instance;\r\n    }\r\n    public abstract ProductDao productDao();\r\n    public abstract TableDao tableDao();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/poly/restaurant/data/db/AppDatabase.java b/app/src/main/java/com/poly/restaurant/data/db/AppDatabase.java
--- a/app/src/main/java/com/poly/restaurant/data/db/AppDatabase.java	(revision 3a5a209b4f412f4cda3d7062d51ccc9734e79a21)
+++ b/app/src/main/java/com/poly/restaurant/data/db/AppDatabase.java	(date 1675306812120)
@@ -11,7 +11,7 @@
 import com.poly.restaurant.data.models.Product;
 import com.poly.restaurant.data.models.Table;
 
-@Database(entities = {Product.class, Table.class}, version = 1, exportSchema = false)
+@Database(entities = {Product.class, Table.class}, version = 2, exportSchema = false)
 public abstract class AppDatabase extends RoomDatabase {
     public static final String DB_NAME = "restaurant.db";
     public static AppDatabase instance;
Index: app/src/main/java/com/poly/restaurant/ui/activities/manage/TableManageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.poly.restaurant.ui.activities.manage;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.os.Parcelable;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.widget.PopupMenu;\r\n\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.poly.restaurant.R;\r\nimport com.poly.restaurant.data.models.Staff;\r\nimport com.poly.restaurant.data.models.Table;\r\nimport com.poly.restaurant.data.models.TableParent;\r\nimport com.poly.restaurant.databinding.ActivityTableManageBinding;\r\nimport com.poly.restaurant.ui.activities.account.AccountActivity;\r\nimport com.poly.restaurant.ui.activities.manage.adapters.IOnClickItemParent;\r\nimport com.poly.restaurant.ui.activities.manage.adapters.TableManageAdapter;\r\nimport com.poly.restaurant.ui.activities.table.TableDetailActivity;\r\nimport com.poly.restaurant.ui.base.BaseActivity;\r\nimport com.poly.restaurant.ui.bill.BillActivity;\r\nimport com.poly.restaurant.ui.history.HistoryActivity;\r\nimport com.poly.restaurant.ui.notification.NotificationActivity;\r\nimport com.poly.restaurant.utils.Constants;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\n\r\npublic class TableManageActivity extends BaseActivity {\r\n    private ActivityTableManageBinding binding;\r\n    private TableManageViewModel viewModel;\r\n    private TableManageAdapter adapter;\r\n    private List<Table> mListTablesEmpty;\r\n    private List<Table> mListTablesLive;\r\n    private List<Table> mListTablesMerge;\r\n    private List<TableParent> mListTableMain;\r\n    private List<Staff> mListAdmin;\r\n    private List<Staff> mListChef;\r\n    private List<Staff> mListCashier;\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        viewModel = new ViewModelProvider(this).get(TableManageViewModel.class);\r\n        binding = ActivityTableManageBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        Window window = getWindow();\r\n\r\n        window.setStatusBarColor(ContextCompat.getColor(this, R.color.status_bar_color));\r\n        binding.prgLoadTable.setVisibility(View.VISIBLE);\r\n        binding.rvTable.setVisibility(View.GONE);\r\n\r\n        mListTablesEmpty = new ArrayList<>();\r\n        mListTablesLive = new ArrayList<>();\r\n        mListTablesMerge = new ArrayList<>();\r\n        mListTableMain = new ArrayList<>();\r\n        mListAdmin = new ArrayList<>();\r\n        mListChef = new ArrayList<>();\r\n        mListCashier = new ArrayList<>();\r\n\r\n        adapter = new TableManageAdapter(mListTableMain, this, new IOnClickItemParent() {\r\n            @Override\r\n            public void onClick(Table table) {\r\n                Intent intent = new Intent(TableManageActivity.this, TableDetailActivity.class);\r\n                intent.putExtra(Constants.EXTRA_TABLE_TO_DETAIL, table);\r\n                intent.putParcelableArrayListExtra(Constants.EXTRA_ADMIN_TO_DETAIL, (ArrayList<? extends Parcelable>) mListAdmin);\r\n                intent.putParcelableArrayListExtra(Constants.EXTRA_CHEF_TO_DETAIL, (ArrayList<? extends Parcelable>) mListChef);\r\n                intent.putParcelableArrayListExtra(Constants.EXTRA_CASHIER_TO_DETAIL, (ArrayList<? extends Parcelable>) mListCashier);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        binding.tvNumFloor.setText(\"Tầng: \" + Constants.staff.getFloor().getNumberFloor());\r\n        binding.rvTable.setAdapter(adapter);\r\n        binding.rvTable.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));\r\n        viewModel.mListEmptyTableLiveData.observe(this, new Observer<List<Table>>() {\r\n            @SuppressLint(\"SetTextI18n\")\r\n            @Override\r\n            public void onChanged(List<Table> tables) {\r\n                if (tables != null) {\r\n                    mListTablesEmpty = tables;\r\n                    binding.tvNumEmptyTable.setText(\"Chưa sử dụng: \" + tables.size());\r\n                    mListTableMain = getListTableMain();\r\n                    adapter.setList(mListTableMain);\r\n                }\r\n            }\r\n        });\r\n\r\n        viewModel.mListLiveTableLiveData.observe(this, new Observer<List<Table>>() {\r\n            @SuppressLint(\"SetTextI18n\")\r\n            @Override\r\n            public void onChanged(List<Table> tables) {\r\n                if (tables != null) {\r\n                    mListTablesLive = tables;\r\n                    binding.tvNumLiveTable.setText(\"Đang sử dụng: \" + tables.size());\r\n                    mListTableMain = getListTableMain();\r\n                    adapter.setList(mListTableMain);\r\n                }\r\n            }\r\n        });\r\n\r\n        viewModel.mListMergeTableLiveData.observe(this, new Observer<List<Table>>() {\r\n            @Override\r\n            public void onChanged(List<Table> tables) {\r\n                if (tables != null) {\r\n                    mListTablesMerge = tables;\r\n                    mListTableMain = getListTableMain();\r\n                    adapter.setList(mListTableMain);\r\n                }\r\n            }\r\n        });\r\n\r\n        viewModel.mListChefLiveData.observe(this, new Observer<List<Staff>>() {\r\n            @Override\r\n            public void onChanged(List<Staff> staff) {\r\n                Log.d(\"TAG\", \"onChanged: \" + new Gson().toJson(staff));\r\n                binding.prgLoadTable.setVisibility(View.GONE);\r\n                mListChef = staff;\r\n                binding.rvTable.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n        viewModel.mListCashierLiveData.observe(this, new Observer<List<Staff>>() {\r\n            @Override\r\n            public void onChanged(List<Staff> staff) {\r\n                mListCashier = staff;\r\n            }\r\n        });\r\n\r\n        viewModel.mListAdminLiveData.observe(this, new Observer<List<Staff>>() {\r\n            @Override\r\n            public void onChanged(List<Staff> staff) {\r\n                mListAdmin = staff;\r\n            }\r\n        });\r\n\r\n        /** Handle event*/\r\n        binding.imgNotification.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(TableManageActivity.this, NotificationActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        binding.imgMenu.setOnClickListener(view -> {\r\n            showPopupMenu();\r\n        });\r\n\r\n        binding.imgNotification.setOnClickListener(view -> {\r\n            startActivity(new Intent(this, NotificationActivity.class));\r\n        });\r\n\r\n        binding.imgBill.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(TableManageActivity.this, BillActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        LocalBroadcastManager.getInstance(this).registerReceiver((receiver),\r\n                new IntentFilter(Constants.REQUEST_TO_ACTIVITY)\r\n        );\r\n    }\r\n\r\n    private final BroadcastReceiver receiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            try {\r\n                String idBill = intent.getStringExtra(Constants.EXTRA_ID_BILL_TO_TABLE_DETAIL);\r\n                viewModel.callToGetTableEmpty(Constants.staff.getFloor().getNumberFloor(), Constants.TABLE_EMPTY_STATUS);\r\n                viewModel.callToGetTableLive(Constants.staff.getFloor().getNumberFloor(), Constants.TABLE_LIVE_STATUS);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);\r\n        super.onStop();\r\n    }\r\n\r\n    private List<TableParent> getListTableMain() {\r\n        List<TableParent> mTableMain = new ArrayList<>();\r\n        if (mListTablesEmpty.size() != 0) {\r\n            mListTablesEmpty.sort(new Comparator<Table>() {\r\n                @Override\r\n                public int compare(Table t1, Table t2) {\r\n                    return t1.getName().compareTo(t2.getName());\r\n                }\r\n            });\r\n            mTableMain.add(new TableParent(\"Bàn còn trống\", mListTablesEmpty));\r\n        }\r\n        if (mListTablesLive.size() != 0) {\r\n            mListTablesLive.sort(new Comparator<Table>() {\r\n                @Override\r\n                public int compare(Table t1, Table t2) {\r\n                    return t1.getName().compareTo(t2.getName());\r\n                }\r\n            });\r\n            mTableMain.add(new TableParent(\"Bàn đang sử dụng\", mListTablesLive));\r\n        }\r\n        if (mListTablesMerge.size() != 0) {\r\n            mListTablesMerge.sort(new Comparator<Table>() {\r\n                @Override\r\n                public int compare(Table t1, Table t2) {\r\n                    return t1.getName().compareTo(t2.getName());\r\n                }\r\n            });\r\n            mTableMain.add(new TableParent(\"Bàn đã gộp\", mListTablesMerge));\r\n        }\r\n        return mTableMain;\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        LocalBroadcastManager.getInstance(this).registerReceiver((receiver),\r\n                new IntentFilter(Constants.REQUEST_TO_ACTIVITY)\r\n        );\r\n        viewModel.callToGetTableEmpty(Constants.staff.getFloor().getNumberFloor(), Constants.TABLE_EMPTY_STATUS);\r\n        viewModel.callToGetTableLive(Constants.staff.getFloor().getNumberFloor(), Constants.TABLE_LIVE_STATUS);\r\n        viewModel.callToGetTableMerge(Constants.staff.getFloor().getNumberFloor(), Constants.TABLE_LIVE_MERGE);\r\n        viewModel.callToGetAdmin();\r\n        viewModel.callToGetChef();\r\n        viewModel.callToGetCashier();\r\n        super.onResume();\r\n    }\r\n\r\n    private void showPopupMenu() {\r\n        PopupMenu popupMenu = new PopupMenu(TableManageActivity.this, binding.imgMenu);\r\n        popupMenu.getMenuInflater().inflate(R.menu.menu_main, popupMenu.getMenu());\r\n        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\r\n            @Override\r\n            public boolean onMenuItemClick(MenuItem menuItem) {\r\n                if (menuItem.getItemId() == R.id.action_account) {\r\n                    startActivity(new Intent(TableManageActivity.this, AccountActivity.class));\r\n                } else if (menuItem.getItemId() == R.id.action_history) {\r\n                    startActivity(new Intent(TableManageActivity.this, HistoryActivity.class));\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n        popupMenu.show();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/poly/restaurant/ui/activities/manage/TableManageActivity.java b/app/src/main/java/com/poly/restaurant/ui/activities/manage/TableManageActivity.java
--- a/app/src/main/java/com/poly/restaurant/ui/activities/manage/TableManageActivity.java	(revision 3a5a209b4f412f4cda3d7062d51ccc9734e79a21)
+++ b/app/src/main/java/com/poly/restaurant/ui/activities/manage/TableManageActivity.java	(date 1675320851674)
@@ -126,7 +126,6 @@
         viewModel.mListChefLiveData.observe(this, new Observer<List<Staff>>() {
             @Override
             public void onChanged(List<Staff> staff) {
-                Log.d("TAG", "onChanged: " + new Gson().toJson(staff));
                 binding.prgLoadTable.setVisibility(View.GONE);
                 mListChef = staff;
                 binding.rvTable.setVisibility(View.VISIBLE);
Index: app/src/main/java/com/poly/restaurant/ui/activities/table/TableDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.poly.restaurant.ui.activities.table;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.PopupMenu;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.poly.restaurant.R;\r\nimport com.poly.restaurant.data.models.Bill;\r\nimport com.poly.restaurant.data.models.Notification;\r\nimport com.poly.restaurant.data.models.Product;\r\nimport com.poly.restaurant.data.models.Staff;\r\nimport com.poly.restaurant.data.models.Table;\r\nimport com.poly.restaurant.databinding.ActivityTableDetailBinding;\r\nimport com.poly.restaurant.preference.AppSharePreference;\r\nimport com.poly.restaurant.ui.activities.merge.MergeTableActivity;\r\nimport com.poly.restaurant.ui.activities.product.FoodActivity;\r\nimport com.poly.restaurant.ui.activities.table.adapter.IOnItemProductTableListener;\r\nimport com.poly.restaurant.ui.activities.table.adapter.ProductTableAdapter;\r\nimport com.poly.restaurant.ui.base.BaseActivity;\r\nimport com.poly.restaurant.ui.dialog.DialogAnnounce;\r\nimport com.poly.restaurant.ui.dialog.DialogRequest;\r\nimport com.poly.restaurant.ui.dialog.interfaces.IOnEventDialogListener;\r\nimport com.poly.restaurant.utils.Constants;\r\nimport com.poly.restaurant.utils.helps.ViewModelFactory;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n@SuppressLint(\"SetTextI18n\")\r\npublic class TableDetailActivity extends BaseActivity {\r\n    private ActivityTableDetailBinding binding;\r\n    private TableDetailViewModel viewModel;\r\n    private List<Product> mListProduct;\r\n    private List<Staff> mListAdmin;\r\n    private List<Staff> mListChef;\r\n    private List<Staff> mListCashier;\r\n    private ProductTableAdapter adapter;\r\n    private AppSharePreference sharePreference;\r\n    private Table table;\r\n    private boolean isShowing = false;\r\n    private final int type = 0;\r\n    private double total = 0;\r\n    private int count = 0;\r\n    private int countCreate = 0;\r\n    private final String date = new SimpleDateFormat(\"dd/MM/yyyy\", Locale.getDefault()).format(Calendar.getInstance().getTime());\r\n    private final String time = new SimpleDateFormat(\"HH:mm:ss\", Locale.getDefault()).format(Calendar.getInstance().getTime());\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        ViewModelFactory factory = new ViewModelFactory(this);\r\n        viewModel = new ViewModelProvider(this, factory).get(TableDetailViewModel.class);\r\n        binding = ActivityTableDetailBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        mListAdmin = getIntent().getParcelableArrayListExtra(Constants.EXTRA_ADMIN_TO_DETAIL);\r\n        mListChef = getIntent().getParcelableArrayListExtra(Constants.EXTRA_CHEF_TO_DETAIL);\r\n        mListCashier = getIntent().getParcelableArrayListExtra(Constants.EXTRA_CASHIER_TO_DETAIL);\r\n        Window window = getWindow();\r\n        window.setStatusBarColor(ContextCompat.getColor(this, R.color.status_bar_color));\r\n        mListProduct = new ArrayList();\r\n        sharePreference = new AppSharePreference(this);\r\n        table = getIntent().getParcelableExtra(Constants.EXTRA_TABLE_TO_DETAIL);\r\n        sharePreference.setTableId(table.getId());\r\n        binding.tvNameTable.setText(table.getName());\r\n        binding.imgDone.setVisibility(View.GONE);\r\n\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvFood.setLayoutManager(layoutManager);\r\n\r\n        adapter = new ProductTableAdapter(mListProduct, new IOnItemProductTableListener() {\r\n            @Override\r\n            public void onClickDelete(@NonNull Product product) {\r\n                viewModel.deleteProduct(product);\r\n            }\r\n\r\n            @Override\r\n            public void onClickDecrease(@NonNull Product product, @NonNull TextView tvQuantity, int position) {\r\n                int quantity = Integer.parseInt(tvQuantity.getText().toString().trim());\r\n                if (quantity > 0) {\r\n                    quantity--;\r\n                    Constants.handleDecrease(tvQuantity, Constants.TYPE_IN_TABLE);\r\n                    handleDecreaseProduct(product, quantity);\r\n                    tvQuantity.setText(quantity + \"\");\r\n                    adapter.getMListProduct().get(position).setAmount(quantity);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onClickIncrease(@NonNull Product product, @NonNull TextView tvQuantity, int position) {\r\n                int quantity = Integer.parseInt(tvQuantity.getText().toString().trim());\r\n                if (quantity < product.getTotal()) {\r\n                    quantity++;\r\n                    handleAddProduct(product, quantity);\r\n                    tvQuantity.setText(quantity + \"\");\r\n                    adapter.getMListProduct().get(position).setAmount(quantity);\r\n                } else {\r\n                    Toast.makeText(TableDetailActivity.this, \"Không được vượt quá sản lượng\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onClickViewItem(@NonNull Product product) {\r\n\r\n            }\r\n        });\r\n\r\n        binding.rvFood.setAdapter(adapter);\r\n\r\n        eventScrollRecycleView();\r\n        initEvent();\r\n        initEventViewModel();\r\n\r\n        viewModel.checkBillAlreadyExists(table.getId());\r\n\r\n        if (!sharePreference.getTableId().equals(sharePreference.getBeforeTableId()) && viewModel.getListProductByIdTable(table.getId()).size() == 0) {\r\n            viewModel.callToGetBillExist(sharePreference.getTableId(), Constants.TYPE_NON_CLICK);\r\n            sharePreference.setBeforeTableId(table.getId());\r\n        }\r\n\r\n        LocalBroadcastManager.getInstance(this).registerReceiver((receiver),\r\n                new IntentFilter(Constants.REQUEST_TO_ACTIVITY)\r\n        );\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        LocalBroadcastManager.getInstance(this).registerReceiver((receiver),\r\n                new IntentFilter(Constants.REQUEST_TO_ACTIVITY)\r\n        );\r\n        super.onResume();\r\n    }\r\n\r\n    private void initEventViewModel() {\r\n        viewModel.getListProductByIdTableLive(sharePreference.getTableId()).observe(this, new Observer<List<Product>>() {\r\n            @Override\r\n            public void onChanged(List<Product> products) {\r\n                if (products != null && products.size() != 0) {\r\n                    if (!isShowing) {\r\n                        visibleBottomSheet();\r\n                        isShowing = true;\r\n                    }\r\n                    total = 0;\r\n                    for (Product product : products) {\r\n                        total += Double.parseDouble((product.getPrice() * product.getAmount()) + \"\");\r\n                    }\r\n                    binding.tvTotalDishes.setText(\"Tổng món: \" + products.size() + \" món\");\r\n                    binding.tvTotalPrice.setText(\"Tổng giá: \" + (int) (total * 23000) + \"vnđ\");\r\n                    mListProduct = products;\r\n                    adapter.setList(products);\r\n                } else {\r\n                    isShowing = false;\r\n                    hideBottomSheet();\r\n                }\r\n                showOrHideView(products);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Bill has been create and push notification to chef and manager\r\n         * */\r\n        viewModel.wasBillCreated.observe(this, new Observer<Bill>() {\r\n            @Override\r\n            public void onChanged(Bill bill) {\r\n                if (bill != null) {\r\n                    String title = \"Thông báo\";\r\n                    String content = \"Bill bàn \" + bill.getTable().getName() + \" đã được tạo. Hành động thôi nào :))\";\r\n                    for (Staff s : mListChef) {\r\n                        countCreate++;\r\n                        viewModel.callToPushNotification(\r\n                                s.getTokenFCM(),\r\n                                title,\r\n                                content,\r\n                                bill.getId(),\r\n                                Constants.staff.getId()\r\n                        );\r\n                        viewModel.createNotification(new Notification(\r\n                                null, title, content, date, time, Constants.staff, s, bill.getId()\r\n                        ));\r\n                    }\r\n                    for (Staff s : mListAdmin) {\r\n                        viewModel.callToPushNotification(\r\n                                s.getTokenFCM(),\r\n                                title,\r\n                                content,\r\n                                bill.getId(),\r\n                                Constants.staff.getId()\r\n                        );\r\n                        viewModel.createNotification(new Notification(\r\n                                null, title, content, date, time, Constants.staff, s, bill.getId()\r\n                        ));\r\n                    }\r\n                    for (Staff s : mListCashier) {\r\n                        viewModel.callToPushNotification(\r\n                                s.getTokenFCM(),\r\n                                title,\r\n                                content,\r\n                                bill.getId(),\r\n                                Constants.staff.getId()\r\n                        );\r\n                        viewModel.createNotification(new Notification(\r\n                                null, title, content, date, time, Constants.staff, s, bill.getId()\r\n                        ));\r\n                    }\r\n                    Table tableUpdate = new Table(table.getId(), table.getName(), table.getFloor(), table.getCapacity(), 1);\r\n                    viewModel.updateTable(table.getId(), tableUpdate);\r\n                    binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order_black);\r\n                    binding.tvStatus.setText(\"Đang giao cho nhà bếp xử lý\");\r\n                    DialogAnnounce.getInstance(\"Tạo hóa đơn thành công\").show(getSupportFragmentManager(), new DialogAnnounce().getTag());\r\n                } else {\r\n                    Toast.makeText(TableDetailActivity.this, \"Failed to create bill successfully\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                binding.btnOrder.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * If bill already exist, update it. If not, create it\r\n         * */\r\n        viewModel.mBillLiveData.observe(this, new Observer<List<Bill>>() {\r\n            @Override\r\n            public void onChanged(List<Bill> bill) {\r\n                if (bill != null && bill.size() != 0) {\r\n                    if (mListProduct.size() != 0) {\r\n                        /**\r\n                         * Update bill\r\n                         * */\r\n                        Table tableUpdate = new Table(table.getId(), table.getName(), table.getFloor(), table.getCapacity(), 1);\r\n                        viewModel.callToUpdateBill(bill.get(0).getId(), new Bill(bill.get(0).getId(), date, time, total, 0, 0, mListProduct,\r\n                                tableUpdate, null, null, Constants.staff, null), Constants.TYPE_UPDATE);\r\n                        String title = \"Thông báo bổ sung món\";\r\n                        String content = \"Bill bàn \" + bill.get(0).getTable().getName() + \" vừa bổ sung thêm món\";\r\n                        for (Staff s : mListChef) {\r\n                            count++;\r\n                            viewModel.callToPushNotification(\r\n                                    s.getTokenFCM(),\r\n                                    title,\r\n                                    content,\r\n                                    bill.get(0).getId(),\r\n                                    Constants.staff.getId()\r\n                            );\r\n                            viewModel.createNotification(new Notification(\r\n                                    null, title, content, date, time, Constants.staff, s, bill.get(0).getId()\r\n                            ));\r\n                        }\r\n                        if (count == mListChef.size()) {\r\n                            DialogAnnounce.getInstance(\"Đã gửi thực đơn cho nhà bếp\").show(getSupportFragmentManager(), new DialogAnnounce().getTag());\r\n                            count = 0;\r\n                        }\r\n                        binding.tvStatus.setText(\"Đang giao cho nhà bếp xử lý\");\r\n                    } else {\r\n                        Toast.makeText(TableDetailActivity.this, \"Chưa có sản phẩm nào\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                } else {\r\n                    /**\r\n                     * Create bill\r\n                     * */\r\n                    Table tableUpdate = new Table(table.getId(), table.getName(), table.getFloor(), table.getCapacity(), 1);\r\n                    viewModel.callToCreateBill(new Bill(null, date, time, total, 0, 0, mListProduct, tableUpdate, null, null, Constants.staff, null));\r\n                    binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order);\r\n                    binding.btnOrder.setText(\"Lên đơn\");\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Was updated bill successfully\r\n         * */\r\n        viewModel.wasUpdated.observe(this, new Observer<Boolean>() {\r\n            @Override\r\n            public void onChanged(Boolean wasUpdated) {\r\n                if (wasUpdated) {\r\n//                    Toast.makeText(TableDetailActivity.this, \"Updated\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    Toast.makeText(TableDetailActivity.this, \"Failed to update\", Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                binding.btnOrder.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * If bill has been created before and now show it to user\r\n         * */\r\n        viewModel.mBilExist.observe(this, new Observer<List<Bill>>() {\r\n            @Override\r\n            public void onChanged(List<Bill> bills) {\r\n                if ((bills != null ? bills.size() : 0) != 0) {\r\n                    binding.imgDone.setVisibility(View.VISIBLE);\r\n                    setStatusTable(bills.get(0));\r\n                    for (Product product : bills.get(0).getProducts()) {\r\n                        viewModel.insertProduct(new Product(\r\n                                null,\r\n                                product.getId(), product.getName(), product.getUrlImage(), product.getPrice(),\r\n                                product.getDescription(),\r\n                                product.getTotal(), product.getAmount(),\r\n                                product.getType(),\r\n                                product.getIdCategory(),\r\n                                sharePreference.getTableId(),\r\n                                product.getStatus()\r\n                        ));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        viewModel.mBillByIdLiveData.observe(this, new Observer<Bill>() {\r\n            @Override\r\n            public void onChanged(Bill bill) {\r\n                if (bill != null) {\r\n                    setStatusProduct(bill);\r\n                    setStatusTable(bill);\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Live data to pay bill\r\n         * */\r\n        viewModel.payBillLiveData.observe(this, new Observer<List<Bill>>() {\r\n            @Override\r\n            public void onChanged(List<Bill> bills) {\r\n                binding.imgDone.setEnabled(true);\r\n                if (bills != null && bills.size() != 0) {\r\n                    Table tableUpdate = new Table(table.getId(), table.getName(), table.getFloor(), table.getCapacity(), 1);\r\n                    viewModel.callToUpdateBill(bills.get(0).getId(), new Bill(bills.get(0).getId(), date, time, total, 0, 2, mListProduct,\r\n                            tableUpdate, null, null, Constants.staff, null), Constants.TYPE_PAY);\r\n                    String title = \"Thông báo xác nhận hóa đơn\";\r\n                    String content = \"Bàn \" + bills.get(0).getTable().getName() + \" đang chờ xác nhận thanh toán\";\r\n                    for (Staff s : mListAdmin) {\r\n                        viewModel.callToPushNotification(\r\n                                s.getTokenFCM(),\r\n                                title,\r\n                                content,\r\n                                bills.get(0).getId(),\r\n                                Constants.staff.getId()\r\n                        );\r\n                        viewModel.createNotification(new Notification(\r\n                                null, title, content, date, time, Constants.staff, s, bills.get(0).getId()\r\n                        ));\r\n                    }\r\n                    for (Staff s : mListCashier) {\r\n                        viewModel.callToPushNotification(\r\n                                s.getTokenFCM(),\r\n                                title,\r\n                                content,\r\n                                bills.get(0).getId(),\r\n                                Constants.staff.getId()\r\n                        );\r\n                        viewModel.createNotification(new Notification(\r\n                                null, title, content, date, time, Constants.staff, s, bills.get(0).getId()\r\n                        ));\r\n                    }\r\n                    DialogAnnounce.getInstance(\"Đã gửi xác nhận cho quản lý\").show(getSupportFragmentManager(), new DialogAnnounce().getTag());\r\n                    binding.tvStatus.setText(\"Đang chờ tiến hành thanh toán\");\r\n                }\r\n            }\r\n        });\r\n\r\n        viewModel.statusBillExistLiveData.observe(this, new Observer<List<Bill>>() {\r\n            @Override\r\n            public void onChanged(List<Bill> bills) {\r\n                if (bills != null && bills.size() != 0) {\r\n                    setStatusTable(bills.get(0));\r\n                } else {\r\n                    for (Product product : viewModel.getListProductByIdTable(sharePreference.getTableId())) {\r\n                        viewModel.deleteProduct(product);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setStatusProduct(Bill bill) {\r\n        mListProduct = bill.getProducts();\r\n        for (Product product : bill.getProducts()) {\r\n            viewModel.updateStatusProductInBill(product.getStatus(), product.getId(), product.getIdTable());\r\n        }\r\n        adapter.setList(mListProduct);\r\n    }\r\n\r\n    private void initEvent() {\r\n        binding.btnOrder.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                viewModel.callToGetBillExist(sharePreference.getTableId(), Constants.TYPE_CLICK);\r\n                binding.btnOrder.setEnabled(false);\r\n            }\r\n        });\r\n        binding.imgDone.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                new DialogRequest(new IOnEventDialogListener() {\r\n                    @Override\r\n                    public void onClickPositive() {\r\n                        viewModel.callToGetBillExist(sharePreference.getTableId(), Constants.TYPE_PAY_BILL);\r\n                        binding.imgDone.setEnabled(false);\r\n                    }\r\n                }).show(getSupportFragmentManager(), new DialogAnnounce().getTag());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void eventScrollRecycleView() {\r\n        binding.rvFood.addOnScrollListener(new RecyclerView.OnScrollListener() {\r\n            @Override\r\n            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {\r\n                if (newState == 0) {\r\n                    visibleBottomSheet();\r\n                } else {\r\n                    hideBottomSheet();\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.btnAdd.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                startActivity(new Intent(TableDetailActivity.this, FoodActivity.class));\r\n            }\r\n        });\r\n        binding.imgMenuTableDetail.setOnClickListener(view -> {\r\n            showPopupMenu();\r\n        });\r\n    }\r\n\r\n    private void showOrHideView(List<Product> products) {\r\n        if (products == null || products.size() == 0) {\r\n            binding.rvFood.setVisibility(View.GONE);\r\n            binding.viewNoneItem.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.viewNoneItem.setVisibility(View.GONE);\r\n            binding.rvFood.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private void handleDecreaseProduct(Product product, int quantity) {\r\n        if (viewModel.getProductById(product.getId(), sharePreference.getTableId()) != null) {\r\n            if (quantity == 0) {\r\n                viewModel.deleteProduct(product);\r\n            }\r\n            viewModel.updateProduct(new Product(\r\n                    product.getIdProduct(),\r\n                    product.getId(), product.getName(), product.getUrlImage(), product.getPrice(),\r\n                    product.getDescription(),\r\n                    product.getTotal(), quantity,\r\n                    product.getType(),\r\n                    product.getIdCategory(),\r\n                    sharePreference.getTableId(),\r\n                    product.getStatus()\r\n            ));\r\n        }\r\n    }\r\n\r\n    private void handleAddProduct(Product product, int quantity) {\r\n        if (viewModel.getProductById(product.getId(), sharePreference.getTableId()) == null) {\r\n            viewModel.insertProduct(new Product(\r\n                    null,\r\n                    product.getId(), product.getName(), product.getUrlImage(), product.getPrice(),\r\n                    product.getDescription(),\r\n                    product.getTotal(), quantity,\r\n                    product.getType(),\r\n                    product.getIdCategory(),\r\n                    sharePreference.getTableId(),\r\n                    product.getStatus()\r\n            ));\r\n        } else {\r\n            viewModel.updateProduct(new Product(\r\n                    product.getIdProduct(),\r\n                    product.getId(), product.getName(), product.getUrlImage(), product.getPrice(),\r\n                    product.getDescription(),\r\n                    product.getTotal(), quantity,\r\n                    product.getType(),\r\n                    product.getIdCategory(),\r\n                    sharePreference.getTableId(),\r\n                    product.getStatus()\r\n            ));\r\n        }\r\n    }\r\n\r\n    private void visibleBottomSheet() {\r\n        binding.viewBottomSheet.setAnimation(AnimationUtils.loadAnimation(getApplicationContext(), R.anim.anim_bottom_to_top));\r\n        binding.viewBottomSheet.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void hideBottomSheet() {\r\n        binding.viewBottomSheet.setAnimation(AnimationUtils.loadAnimation(getApplicationContext(), R.anim.anim_top_to_bottom));\r\n        binding.viewBottomSheet.setVisibility(View.GONE);\r\n    }\r\n\r\n    private final BroadcastReceiver receiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            try {\r\n                String idBill = intent.getStringExtra(Constants.EXTRA_ID_BILL_TO_TABLE_DETAIL);\r\n                viewModel.getBillById(idBill);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);\r\n        super.onStop();\r\n    }\r\n\r\n    private void setStatusTable(Bill bill) {\r\n        if (bill != null) {\r\n            if (bill.getStatus() == 0) {\r\n                binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order_black);\r\n                binding.btnOrder.setText(\"Cập nhật\");\r\n                binding.tvStatus.setText(\"Đang giao cho nhà bếp xử lý\");\r\n                binding.imgDone.setVisibility(View.GONE);\r\n            } else if (bill.getStatus() == 1) {\r\n                binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order_black);\r\n                binding.btnOrder.setText(\"Cập nhật\");\r\n                binding.tvStatus.setText(\"Đồ ăn đã hoàn thành. Bàn đang hoạt động.\");\r\n                binding.imgDone.setVisibility(View.VISIBLE);\r\n            } else if (bill.getStatus() == 2) {\r\n                binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order_black);\r\n                binding.btnOrder.setText(\"Cập nhật\");\r\n                binding.btnOrder.setEnabled(false);\r\n                binding.tvStatus.setText(\"Đang chờ tiến hành thanh toán\");\r\n                binding.imgDone.setVisibility(View.VISIBLE);\r\n            } else if (bill.getStatus() == 3) {\r\n                binding.tvStatus.setText(\"Thanh toán thành công\");\r\n                for (Product product : viewModel.getListProductByIdTable(bill.getTable().getId())) {\r\n                    viewModel.deleteProduct(product);\r\n                }\r\n                DialogAnnounce.getInstance(\"Hóa đơn đã được thanh toán!!\").show(getSupportFragmentManager(), new DialogAnnounce().getTag());\r\n                binding.btnOrder.setBackgroundResource(R.drawable.bg_btn_order);\r\n                binding.btnOrder.setText(\"Lên đơn\");\r\n                binding.imgDone.setVisibility(View.GONE);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showPopupMenu() {\r\n        PopupMenu popupMenu = new PopupMenu(TableDetailActivity.this, binding.imgMenuTableDetail);\r\n        popupMenu.getMenuInflater().inflate(R.menu.menu_table_detail, popupMenu.getMenu());\r\n        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\r\n            @Override\r\n            public boolean onMenuItemClick(MenuItem menuItem) {\r\n                if (menuItem.getItemId() == R.id.action_add_food) {\r\n                    startActivity(new Intent(TableDetailActivity.this, FoodActivity.class));\r\n                } else if (menuItem.getItemId() == R.id.action_merge) {\r\n                    Intent intent = new Intent(TableDetailActivity.this, MergeTableActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_TABLE_TO_MERGE, table);\r\n                    startActivity(intent);\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n        popupMenu.show();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/poly/restaurant/ui/activities/table/TableDetailActivity.java b/app/src/main/java/com/poly/restaurant/ui/activities/table/TableDetailActivity.java
--- a/app/src/main/java/com/poly/restaurant/ui/activities/table/TableDetailActivity.java	(revision 3a5a209b4f412f4cda3d7062d51ccc9734e79a21)
+++ b/app/src/main/java/com/poly/restaurant/ui/activities/table/TableDetailActivity.java	(date 1675320851666)
@@ -55,6 +55,7 @@
     private List<Staff> mListAdmin;
     private List<Staff> mListChef;
     private List<Staff> mListCashier;
+    private List<Product> mListProductOld;
     private ProductTableAdapter adapter;
     private AppSharePreference sharePreference;
     private Table table;
@@ -79,6 +80,7 @@
         Window window = getWindow();
         window.setStatusBarColor(ContextCompat.getColor(this, R.color.status_bar_color));
         mListProduct = new ArrayList();
+        mListProductOld = new ArrayList<>();
         sharePreference = new AppSharePreference(this);
         table = getIntent().getParcelableExtra(Constants.EXTRA_TABLE_TO_DETAIL);
         sharePreference.setTableId(table.getId());
